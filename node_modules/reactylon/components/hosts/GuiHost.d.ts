import type { BabylonEntity, RootContainer, UpdatePayload } from '@types';
import { type GuiHostProps, type GuiTriggerable } from '@props';
import type { Control, Container } from '@babylonjs/gui';
import '../../index';
export type Params = {
    paramsNames: Array<string | undefined>;
    paramsValues: Array<unknown>;
};
type GuiComponent = Pick<Container, 'addControl' | 'removeControl'> & GuiTriggerable;
export declare class GuiHost {
    static createInstance(type: string, Class: any, props: GuiHostProps, rootContainer: RootContainer, cloneFn?: Function, params?: Params): any;
    static addChild(parentInstance: BabylonEntity<GuiComponent>, child: BabylonEntity<Control>): void;
    static removeChild(parentInstance: BabylonEntity<GuiComponent> | undefined, child: BabylonEntity<Control>): void;
    static prepareUpdate(): UpdatePayload;
    static commitUpdate(instance: BabylonEntity<Control>, updatePayload: UpdatePayload): void;
}
export {};
