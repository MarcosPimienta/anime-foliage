import type { ILoadingScreen as BabylonILoadingScreen } from '@babylonjs/core';
type TransitionStyle = {
    start: Partial<CSSStyleDeclaration>;
    end: Partial<CSSStyleDeclaration>;
};
export type LoadingScreenOptions = {
    component: React.FC;
    animationStyle?: TransitionStyle;
};
declare class CustomLoadingScreen implements Pick<BabylonILoadingScreen, 'displayLoadingUI' | 'hideLoadingUI'> {
    private _renderingCanvas;
    private _animationStyle?;
    private _loadingDiv;
    private _engine;
    private _resizeObserver;
    private _isLoading;
    /**
     * Maps a loading `HTMLDivElement` to a tuple containing the associated `HTMLCanvasElement`
     * and its `DOMRect` (or `null` if not yet available).
     */
    private _loadingDivToRenderingCanvasMap;
    /**
     * Creates a new loading screen rendering the React element in input
     * @param _renderingCanvas defines the canvas used to render the scene
     * @param loader defines the custom React component to show
     * @param _animationStyle the custom CSS styles applied at the beginning and end of the animation
     */
    constructor(_renderingCanvas: HTMLCanvasElement, Loader: React.FC, _animationStyle?: TransitionStyle | undefined);
    /**
     * Function called to display the loading screen
     */
    displayLoadingUI(): void;
    /**
     * Function called to hide the loading screen
     */
    hideLoadingUI(): void;
    /**
     * Checks if the layout of the canvas has changed by comparing the current layout
     * rectangle with the previous one.
     *
     * This function compares of the two `DOMRect` objects to determine if any of the layout dimensions have changed.
     * If the layout has changed or if there is no previous layout (i.e., `previousCanvasRect` is `null`),
     * it returns `true`. Otherwise, it returns `false`.
     *
     * @param previousCanvasRect defines the previously recorded `DOMRect` of the canvas, or `null` if no previous state exists.
     * @param currentCanvasRect defines the current `DOMRect` of the canvas to compare against the previous layout.
     * @returns `true` if the layout has changed, otherwise `false`.
     */
    private _isCanvasLayoutChanged;
    private _resizeLoadingUI;
}
export default CustomLoadingScreen;
