import { type StoreApi } from 'zustand';
import type { Nullable, Engine, HavokPlugin, Scene, WebXRDefaultExperience } from '@babylonjs/core';
import type { IPhysicsEngine } from '@babylonjs/core/Physics/IPhysicsEngine';
export type EngineStore = {
    engine: Nullable<Engine>;
    isMultipleCanvas: boolean;
    isMultipleScene: boolean;
};
export type Store = EngineStore & {
    scene: Nullable<Scene>;
    canvas: Nullable<HTMLCanvasElement | WebGLRenderingContext>;
    xrExperience: Nullable<WebXRDefaultExperience>;
    physicsEngine: Nullable<IPhysicsEngine>;
};
export declare const SceneContext: import("react").Context<StoreApi<Store> | null>;
export declare const createBabylonStore: (initialProps: Store) => StoreApi<Store>;
/**
 * Get the engine from the context.
 */
export declare function useEngine(): Engine;
export declare function useEngine<T>(selector: (engine: Engine) => T): T;
/**
 * Get the scene from the context.
 */
export declare function useScene(): Scene;
export declare function useScene<T>(selector: (scene: Scene) => T): T;
/**
 * Get the canvas DOM element from the context.
 */
export declare const useCanvas: () => Nullable<HTMLCanvasElement | WebGLRenderingContext>;
/**
 * Get the XR experience from the context.
 */
export declare function useXrExperience(): WebXRDefaultExperience;
export declare function useXrExperience<T>(selector: (xrExperience: WebXRDefaultExperience) => T): T;
/**
 * Get the physics engine from the context.
 */
export declare function usePhysics(): IPhysicsEngine;
export declare function usePhysics<T>(selector: (physicsEngine: IPhysicsEngine) => T): T;
/**
 * Get the Havok plugin from the context.
 */
export declare const useHavok: () => HavokPlugin;
